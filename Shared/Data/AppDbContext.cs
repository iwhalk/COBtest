// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Reflection;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Shared.Models;
using Module = Shared.Models.Module;
using TagList = Shared.Models.TagList;

namespace Shared.Data
{
    public partial class AppDbContext : DbContext
    {
        public AppDbContext()
        {
        }

        public AppDbContext(DbContextOptions<AppDbContext> options)
            : base(options)
        {
        }

        public virtual DbSet<ActionCatalog> ActionCatalogs { get; set; }
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<AspNetUserRole> AspNetUserRoles { get; set; }
        public virtual DbSet<FinalPost> FinalPosts { get; set; }
        public virtual DbSet<LaneCatalog> LaneCatalogs { get; set; }
        public virtual DbSet<LogRole> LogRoles { get; set; }
        public virtual DbSet<LogRoleModule> LogRoleModules { get; set; }
        public virtual DbSet<LogTagList> LogTagLists { get; set; }
        public virtual DbSet<LogUserActivity> LogUserActivities { get; set; }
        public virtual DbSet<Module> Modules { get; set; }
        public virtual DbSet<SackStatement> SackStatements { get; set; }
        public virtual DbSet<TagList> TagLists { get; set; }
        public virtual DbSet<Tariff> Tariffs { get; set; }
        public virtual DbSet<Transaction> Transactions { get; set; }
        public virtual DbSet<TypeClass> TypeClasses { get; set; }
        public virtual DbSet<TypePayment> TypePayments { get; set; }
        public virtual DbSet<UsersOpe> UsersOpes { get; set; }
        public virtual DbSet<Viapasstags> Viapasstags { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<ActionCatalog>(entity =>
            {
                entity.HasOne(d => d.IdModuleNavigation)
                    .WithMany()
                    .HasForeignKey(d => d.IdModule)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ActionCatalog_ID_Module");
            });

            modelBuilder.Entity<AspNetUserRole>(entity =>
            {
                entity.HasKey(e => new { e.UserId, e.RoleId });
            });

            modelBuilder.Entity<FinalPost>(entity =>
            {
                entity.HasKey(e => e.IdFinalPosts)
                    .HasName("PK__FinalPos__FC32A3A64C0B8348");

                entity.HasOne(d => d.IdCatalogNavigation)
                    .WithMany(p => p.FinalPosts)
                    .HasForeignKey(d => d.IdCatalog)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FinalPosts_ID_Catalog");

                entity.HasOne(d => d.IdUserNavigation)
                    .WithMany(p => p.FinalPosts)
                    .HasForeignKey(d => d.IdUser)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_FinalPosts_ID_User");
            });

            modelBuilder.Entity<LaneCatalog>(entity =>
            {
                entity.HasKey(e => e.IdCatalog)
                    .HasName("PK__LaneCata__38D620C5CB6AFA8F");
            });

            modelBuilder.Entity<LogTagList>(entity =>
            {
                entity.HasOne(d => d.IdUserNavigation)
                    .WithMany(p => p.LogTagLists)
                    .HasForeignKey(d => d.IdUser)
                    .HasConstraintName("FK_LogTagList_ID_User");
            });

            modelBuilder.Entity<SackStatement>(entity =>
            {
                entity.HasKey(e => e.IdSac)
                    .HasName("PK__SackStat__27FFB30C8965CAE5");
            });

            modelBuilder.Entity<TagList>(entity =>
            {
                entity.HasKey(e => e.Tag)
                    .HasName("PK__TagList__C451641235501436");

                entity.Property(e => e.Tag).HasMaxLength(50);

                entity.Property(e => e.EconomicNumber)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.IdUser)
                    .HasColumnName("ID_User")
                    .HasMaxLength(450);

                entity.Property(e => e.IdViatags).HasColumnName("ID_VIATags");

                entity.Property(e => e.InsertionDate).HasColumnType("datetime");

                entity.Property(e => e.VehiclePlate)
                    .IsRequired()
                    .HasMaxLength(8)
                    .IsUnicode(false);

                entity.HasOne(d => d.IdViatagsNavigation)
                    .WithMany(p => p.TagList)
                    .HasForeignKey(d => d.IdViatags)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_TagList_ID_VIATags");
            });

            modelBuilder.Entity<Viapasstags>(entity =>
            {
                entity.HasKey(e => e.IdViatags)
                    .HasName("PK__VIAPASST__4D7F5324F865440A");

                entity.ToTable("VIAPASSTags");

                entity.Property(e => e.IdViatags).HasColumnName("ID_VIATags");

                entity.Property(e => e.Tag)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.UpdateDate).HasColumnType("datetime");
            });

            modelBuilder.Entity<Tariff>(entity =>
            {
                entity.HasKey(e => e.IdTariff)
                    .HasName("PK__Tariff__F897438AB6AEC3CF");

                entity.HasOne(d => d.IdCatalogNavigation)
                    .WithMany(p => p.Tariffs)
                    .HasForeignKey(d => d.IdCatalog)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Tariff_ID_Catalog");

                entity.HasOne(d => d.IdClassNavigation)
                    .WithMany(p => p.Tariffs)
                    .HasForeignKey(d => d.IdClass)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Tariff_ID_Class");
            });

            modelBuilder.Entity<Transaction>(entity =>
            {
                entity.HasKey(e => e.IdTransaction)
                    .HasName("PK__Transact__3F16C92D6348D308");

                entity.HasOne(d => d.IdCatalogNavigation)
                    .WithMany(p => p.Transactions)
                    .HasForeignKey(d => d.IdCatalog)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Transactions_ID_Catalog");

                entity.HasOne(d => d.IdClassNavigation)
                    .WithMany(p => p.TransactionIdClassNavigations)
                    .HasForeignKey(d => d.IdClass)
                    .HasConstraintName("FK_Transactions_ID_Class");

                entity.HasOne(d => d.IdClass2Navigation)
                    .WithMany(p => p.TransactionIdClass2Navigation)
                    .HasForeignKey(d => d.IdClass2)
                    .HasConstraintName("FK_Transactions_ID_Class2");

                entity.HasOne(d => d.IdPaymentNavigation)
                    .WithMany(p => p.Transactions)
                    .HasForeignKey(d => d.IdPayment)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Transactions_ID_Payment");

                entity.HasOne(d => d.IdTariffNavigation)
                    .WithMany(p => p.Transactions)
                    .HasForeignKey(d => d.IdTariff)
                    .HasConstraintName("FK_Transactions_ID_Tariff");

                entity.HasOne(d => d.IdUserNavigation)
                    .WithMany(p => p.Transactions)
                    .HasForeignKey(d => d.IdUser)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Transactions_ID_User");
            });

            modelBuilder.Entity<TypeClass>(entity =>
            {
                entity.HasKey(e => e.IdClass)
                    .HasName("PK__TypeClas__D7CF744C7AD2F3C6");
            });

            modelBuilder.Entity<TypePayment>(entity =>
            {
                entity.HasKey(e => e.IdPayment)
                    .HasName("PK__TypePaym__C2118ADE06CBFC5F");

                entity.Property(e => e.IdPayment).ValueGeneratedNever();
            });

            modelBuilder.Entity<UsersOpe>(entity =>
            {
                entity.HasKey(e => e.IdUserOpe)
                    .HasName("PK__UsersOPE__F629E50720C42A46");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}